Basically the Components folder Contain all User  files
Components :
    - Dashboard 
    - EditProfile 
    - EditStall 
    - Footer 
    - NewProfile ( Not in use )
    - NewStallProfile 
    - Popup 
    - Profile
    - SuccessFailure
    - upload.js


--------------- Dashboard started ----------------


Event Insights Component

 Overview:
  The Event Insights component is designed to provide detailed analytics and information about event attendees and leads generated by the user's stall. It offers functionality to view and manage leads, export lead data, and navigate between different tabs for accessing stall-specific and all leads.

 Features:
  -Stall Leads Tab: Displays leads specific to the user's stall.
  -All Leads Tab: Shows all leads generated across all stalls.
  -Lead Management: Allows the user to manage leads by updating lead status (e.g., GOOD, MID, STRONG).
  -Export to Excel: Enables the user to export lead data to Excel format.
  -Responsive Design: Ensures optimal viewing experience across devices.

 Components:
  -Tabs: Allows navigation between different tabs for viewing stall-specific and all leads.
  -Lead Management Section: Provides options to update lead status and manage lead-related actions.
  -Visitor Details: Displays detailed information about event attendees, including name, contact details, and lead status.
  -Export Options: Offers functionality to export lead data to Excel format for further analysis.
  -Loading Indicator: Indicates loading state when fetching data from the server.

 Dependencies:
  -React Router DOM: Used for navigation between different tabs within the component.
  -APIs: Utilizes custom APIs for fetching stall-specific data, lead details, and lead management functionalities.

 Usage:
 The Event Insights component can be integrated into the user dashboard or event management interface to provide real-time analytics and lead management capabilities.

---
 ExportTOEXCEL and ExportToFullExcel:
    It is used to Export a given data in excel sheet
 
-----
Dashboard Component

Overview:
The Dashboard component serves as the main interface for users to access event-related information and insights. It provides functionality to view recent events, access event insights, and navigate between different sections of the dashboard.

 Features:
   -Navigation Menu: Users can access a navigation menu to toggle an aside panel for additional options.
   -Event Insights: Users can view insights for specific events, such as attendee details and analytics.
   -Recent Events: Displays a list of recent events attended by the user, allowing for quick access to event details.
   -Responsive Design: Ensures optimal viewing experience across different devices, including desktop and mobile.
 
 Components:
  -Navigation Menu: Allows users to toggle an aside panel for additional options and navigation.
  -Swiper: Utilized for displaying event cards with swipe navigation functionality.
  -Recent Events Section: Displays recent events attended by the user with options to view event insights.
  -Aside Panel: Provides additional options and features, such as user profile settings and preferences.
  -Footer: Contains essential links and information, ensuring accessibility and user engagement.

  Dependencies:
   -React Router DOM: Used for client-side routing and navigation between different pages within the dashboard.
   -Swiper: Utilized for implementing swipe-based navigation for event cards.
   -FontAwesome Icons: May rely on FontAwesome icons for UI elements such as arrows and menu icons.
   -APIs: Utilizes custom APIs for fetching event data and insights, including attendee details and analytics.

 Usage:
  -The Dashboard component is integrated into the user interface of the application to provide a centralized hub for accessing event-related information and insights.
  -It requires proper configuration and setup of API endpoints for fetching event data and user-specific information.


     

--------------- Dashboard end   -------------------



--------------- Profile Start ---------------


Index

Overview:
The Index allows users to edit their profile information, add services/products, and manage events. It consists of tabs for navigating between different sections of profile management, including profile editing, adding services/products, and managing events.

Features:
-Tab Navigation: Users can switch between different tabs to access specific sections of profile management, such as profile editing, adding services/products, and managing events.
-Profile Editing: Provides functionality for users to edit their profile information, including personal details, contact information, and preferences.
-Adding Services/Products: Allows users to add services or products to their profile, providing information such as name, description, pricing, and availability.
-Managing Events: Enables users to manage events, including creating new events, editing existing events, and viewing event details.

Tabs:
-Profile: Allows users to edit their profile information, including personal details and contact information.
-Services/Product: Provides functionality for users to add services or products to their profile.
-Events: Enables users to manage events, including creating new events, editing existing events, and viewing event details.

Components:
-Profile: Handles profile editing functionality, including form fields for updating user information.
-Services/Product: Manages services/products addition, including form fields for adding details such as name, description, and pricing.
-Events: Handles event management functionality, including options for creating new events, editing existing events, and viewing event details.

Dependencies:
-React Router DOM: Utilized for client-side routing and navigation between different tabs within the Index.
-FontAwesome Icons: May rely on FontAwesome icons for UI elements such as arrows and navigation icons.
-APIs: Utilizes custom APIs for fetching user profile data, adding services/products, and managing events.

Usage:
-The Index is integrated into the user interface of the application to provide users with the ability to manage their profile information, services/products, and events.
-It requires proper configuration and setup of API endpoints for fetching user profile data, adding services/products, and managing events.


---
Profilenew Component
 Description:
 The Profilenew component is a React functional component responsible for managing user profiles. It allows users to view and edit their profile details including profile picture, banner, display name, description, social media links, contact details, etc.

 Dependencies:
 -React
 -react-icons
 -react-bootstrap
 -react-dropzone
 -react-loading
 -firebase
 -react-router-dom

 Props: 
 -userData: Object containing user profile data.
 -USER_NAME: String containing the user's username.
 -handleData: Function to handle updated user data.

 State Variables:
 -isAtTop: Boolean to track whether the component is at the top of the page.
 -isAsideOpen: Boolean to track the state of the aside menu.
 -showModal1, showModal2, showModal3: Booleans to control the visibility of different modals.
 -Photo: String to store the URL of the profile photo.
 -banner: String to store the URL of the profile banner.
 -error: String to store error messages.
 -Various other state variables for managing form inputs and loading states.

 Functions:
 -handleModalClose: Function to close all modals.
 -getUserProfile: Function to fetch user profile data from the server.
 -EditDataSetHandler: Function to set initial state values based on user data.
 -Various other functions for handling profile picture/banner uploads, profile updates, etc.

 Lifecycle Methods:
 useEffect: Used to fetch user profile data when the component mounts or when profileUserName changes, and to set initial state values based on user data.

 Rendering:
  -Renders profile banner, profile picture, display name, description, social media links, contact details, and buttons for editing and saving profile details.
  -Includes conditional rendering for modals (profile picture upload, banner upload, edit profile details).
  -Renders loading spinners during file uploads and success/failure messages after profile updates.

 External API Integration:
 -Uses Firebase Storage for uploading and retrieving profile pictures and banners.
 -Communicates with a server-side API for fetching and updating user profile data.

 Notes:
 -Ensure that Firebase is properly configured with the necessary storage rules and API keys.
 -The component relies on external APIs for fetching and updating user data, ensure these APIs are properly implemented and accessible.

---
Links

Description:
The Links component is responsible for displaying a list of services and products. It allows users to view, add, edit, and delete services or products.

Dependencies:
-React
-Swiper

Props:
None

State:
-isLoading: Indicates whether the component is still loading data.
-showModal1: Controls the visibility of the modal for adding new services or products.
-isEdit: Indicates whether the user is in editing mode.
-isCreatePopup: Controls the visibility of the modal for adding new services or products.
-isEditPopup: Controls the visibility of the modal for editing existing services or products.
-isDeletePopup: Controls the visibility of the modal for deleting services or products.
-services: An array containing the list of services.
-products: An array containing the list of products.
-title: The title of the service or product being added or edited.
-description: The description of the service or product being added or edited.
-isServiceOrProduct: Indicates whether the item being added or edited is a service or a product.
-coverImage: The cover image of the service or product being added or edited.
-uploading: Indicates whether an image is being uploaded.

Methods:
-handleModalClose: Closes the modal for adding new services or products.
-handleCreateModel: Toggles the visibility of the modal for adding new services or products.
-handleEdit: Handles the editing of a service or product.
-handleEditmodel: Toggles the visibility of the modal for editing existing services or products.
-handleDelete: Handles the deletion of a service or product.
-handleDeletemodel: Toggles the visibility of the modal for deleting services or products.
-HandleCoverImage: Handles the selection of a cover image for the service or product being added or edited.
-handleSuccessFail: Handles success or failure messages after performing operations like adding, editing, or deleting services or products.

Rendering:
-Renders a loading indicator if data is still loading.
-Renders a list of services and products using Swiper for a carousel-like display.
-Each service or product is rendered as a card displaying its title, cover image, and options for editing or deleting.
-Includes functionality for adding new services or products, with a modal popup for inputting details.

Error Handling:
Displays success or failure messages for operations like adding, editing, or deleting services or products.

Usage:
The Links component can be imported and used in any React application where there is a need to manage and display a list of services and products.

----
Events 
 Note :Not in use

---
Profile
 Note :Not in use , it is old we use ProfileNew alternative for his


---
SaveContact

Description:
The SaveContact component allows users to save contact information as a vCard file. It provides a button that, when clicked, generates a vCard containing the contact details provided as props and triggers a download of the vCard file.

Props:
-name: The name of the contact.
-notes: Additional notes or title for the contact.
-email: The email address of the contact.
-phoneNo: The phone number of the contact.
-website: The website URL of the contact.
-instagram: The Instagram username of the contact.
-facebook: The Facebook username of the contact.
-address: The address of the contact.

Method:
handleSaveClick: This method is triggered when the "Save Contact" button is clicked. It constructs the vCard content using the contact information provided as props, creates a Blob object containing the vCard content, generates a URL for the Blob, creates a link element with attributes specifying the filename and URL, and triggers a click on the link to initiate the download of the vCard file.

Rendering:
The component renders a button with the label "Save Contact" and an icon indicating the action. When clicked, the button triggers the handleSaveClick method.

Usage:
The SaveContact component can be imported and used in any React application where there is a need to save contact information as a vCard file.


---
ServiceOrProductCreate 
Note :Not in Use (old copy of the Link component)


--------------- Profile End ---------------

-------------- EditStall Start -------------

Index

Description:
The Index component serves as the main entry point for a specific page or section of a React application. It renders a Profile component and a Footer component within a container div.

Components Used:
-Profile: This component is imported from the './Profile' file and rendered within the Index component. It likely displays user profile information.
-Footer: This component is imported from the '../Footer/Footer' file and rendered below the Profile component.

Props:
None

Rendering:
The Index component renders a container div with a maximum width of either 600px or 400px depending on the screen size. Inside this container, it renders the Profile component, passing the USER_NAME prop to it. Below the Profile component, it renders the Footer component.

---
Profile

Description:
The Profile component is responsible for displaying and managing user profiles. It allows users to create, edit, and manage their profile details, including cover image, display name, description, contact details, and services/products offered.

Components Used:
-React Icons: Various icons are imported from the 'react-icons' library for visual elements like arrows, pens, images, etc.
-Link: Imported from 'react-router-dom' for navigating to different routes within the application.
-UploadFile: Custom component or function for handling file uploads.
-APIs: Custom functions imported from '../../APIS/APIs' for making API calls to interact with the backend server.

Props:
USER_NAME: Represents the username of the current user whose profile is being displayed.

State Variables:
Various state variables are used to manage the profile details, modal visibility, editing mode, and subscription information.

Functions:
-handlePrint: Function to trigger printing of the profile details.
-handleModalClose: Function to close the modal windows.
-HandleCoverImage: Function to handle the selection and upload of a cover image.
-HandleProfilePhoto: Function to handle the selection and upload of a profile photo.
-HandleEbrochure: Function to handle the selection and upload of an e-brochure.
-getStallHandler: Function to fetch user stall/profile details.
-GetAllProductOrServices: Function to fetch all available services or products.
-GetStallProductOrServicesHandler: Function to fetch services or products associated with the user's stall/profile.
-AddStallProductOrServicesHandler: Function to add a service or product to the user's stall/profile.
-RemoveStallProductOrServicesHandler: Function to remove a service or product from the user's stall/profile.
-UpdateCreateHandler: Function to handle updating or creating a stall/profile.
-DeleteHandler: Function to delete a stall/profile.
-AfterUpdateHandler: Function to reset state variables after an update operation.
-handleEdit: Function to handle editing of profile details.
-getSubscriptionsHandle: Function to fetch user subscriptions.
-checkSuncription: Function to check if the user has a subscription.
-Various other helper functions for handling UI interactions and data manipulation.

Rendering:
-The component renders various UI elements such as buttons, inputs, images, and modal windows to display and manage the profile details.
-Conditional rendering is used to display different content based on whether the user has an existing profile or not.
-The component also handles the display of subscription-related messages for upgrading to a business profile.

---
Savethis
Note : Not in Use (Just a copy of the Profile)

-------------- EditStall End -------------

------------Footer Start--------------

Footer

Description:
The Footer component represents the footer section of the application. It typically contains branding information, logos, and attribution details.

Components Used:
-React Fragment: Imported from 'react' to enable the grouping of multiple elements without adding extra nodes to the DOM.
-Various image assets imported from the 'Assets' directory for logos and icons.

Props:
This component does not accept any props.

Rendering:
-The Footer component renders a container div with a fixed height and a white background color.
-Inside the container, there's a flex container with centered content.
-The footer includes the RABTO logo along with branding text.
-Attribution information is displayed at the bottom left corner of the footer.

------------Footer End ---------------

-----------NewProfile Start-----------

NewProfile
 Note :Not in use 

 ---------New0Profile End ------------


 ---------------NewStallProfile Start-----------
  Basically this Folder is Alternative  of (../Components/stall) ,it is used to   Display a Stall in event side

 Index 
  Render a Profile Components 
---
Profile

Description:
The Profile component represents the profile page for a stall or exhibitor. It displays information about the stall, such as its name, description, products/services, and allows users to interact with the stall by adding contacts, bookmarking, and viewing e-brochures.

Components Used:
-React Fragment: Imported from 'react' to enable the grouping of multiple elements without adding extra nodes to the DOM.
-Various image assets imported from the 'Assets' directory.
-External components like AddContact for adding contact information.
-Swiper component from 'swiper/react' for displaying product/service slides.
-React Icons for the arrow back icon.

Props:
This component does not accept any props.

State Variables:
-stallProfile: Holds information about the stall or exhibitor profile.
-stallserviceproduct: Stores an array of products or services offered by the stall.
-currentuser: Represents the current user's profile.
-executed: Indicates whether certain actions have been executed to prevent repeated execution.

useEffect Hooks:
-useEffect to fetch stall products or services when the stallProfile changes.
-useEffect to fetch stall details and user profile on component mount.
-useEffect to create scanned stall entries for both visitors and users.
-useEffect to fetch user profile when the USER_NAME changes.

Helper Functions:
-getUserProfile: Fetches the current user's profile using their username.
-getStallHandler: Fetches stall details by ID.
-GetStallProductOrServicesHandler: Fetches products or services offered by the stall.
-BookMarkHandler: Handles the bookmarking of a stall by the current user.

Rendering:
-Displays stall information such as name, description, and stall number.
-Allows users to add contacts, view profile, and bookmark the stall.
-Utilizes Swiper component to display product/service slides.
-Provides a button to view and download the e-brochure.

---
Visitor
  Not in use

 --------------- NewStallProfile End -----------

 -------------- Popup start-------------

Popup 
Description:
The Popup component is a reusable React component designed to display a modal dialog box. It provides a visual overlay to grab the user's attention and typically contains a message and options for the user to confirm or cancel an action.

Props:
-isDelete (boolean): Indicates whether the action involves deletion.
-isEdit (boolean): Indicates whether the action involves editing.
-isCreate (boolean): Indicates whether the action involves creating.
-handleModel (function): A callback function to handle the modal closure based on user input.

Usage:
The Popup component can be used by passing appropriate props to customize its behavior based on the specific action.

Styling:
-The Popup component may require styling to fit the overall design of the application.
-It typically includes a semi-transparent background overlay to dim the content behind the modal.
-The modal dialog box is often centered on the screen and may have rounded corners for aesthetic purposes.
-Buttons within the modal are styled to be easily distinguishable and clickable.

------------ popup End --------------


--------------Profile Start -------------

Index 
Description:
The Index component is a React functional component responsible for rendering the user profile page. It fetches user profile data, including services, products, and events, from the backend API and displays them in a visually appealing manner.

Dependencies:
-React
-Swiper: A React library for building sliders/carousels.
-React Router DOM: For handling routing within the application.

Props:
None

State:
-isAtTop (boolean): Indicates whether the user has scrolled to the top of the page.
-isAsideOpen (boolean): Indicates whether the side navigation panel is open or closed.
-userData (object): Holds the user profile data fetched from the backend.
-services (array): Stores the list of services associated with the user.
-products (array): Stores the list of products associated with the user.
-events (array): Stores the list of events associated with the user.

Hooks:
-useEffect: Used to fetch user profile data and initialize state variables when the component mounts.
-useRef: Used to create a reference to the component for detecting scrolling behavior.

Functions:
-handleAside: Toggles the visibility of the side navigation panel.
-getUserProfile: Fetches user profile data from the backend API.
-callPhoneNumber: Opens the phone dialer with the user's phone number when called.
-serviceHandler: Fetches the list of services associated with the user.
-productHandler: Fetches the list of products associated with the user.
-getEventHandler: Fetches the list of events associated with the user.
-LinkAdjustmentsHandler: Adjusts external links by adding 'https://' if they don't already have it.

Rendering:
-Renders user profile data, including banner image, profile photo, display name, and bio.
-Renders social media links if available.
-Renders buttons for calling the user's phone number and saving the contact.
-Renders sections for displaying events, services, and products in carousel/slider format.
-Utilizes Swiper library for carousel functionality.

Notes:
-Ensure that appropriate API endpoints are configured for fetching user profile data, services, products, and events.
-Customize the component's appearance and behavior according to the application's requirements and design guidelines.

---
Aside  

Overview
The Aside component is a React component designed to render a sidebar menu for a web application. It includes user profile information, menu items, and a logout button.

Dependencies
-React: A JavaScript library for building user interfaces.
-react-icons: A library providing a collection of icons for React applications.
-react-router-dom: A routing library for React applications.
-js-cookie: A JavaScript library for handling cookies.

Props
The Aside component does not accept any props.

State Variables
-responsePayload: Stores the decoded JWT token.
-user: Represents the decoded user information retrieved from the JWT token.
-userData: Stores the user profile data fetched from an API.

Constants
asideArray: An array of objects representing menu items with their paths and names.

Hooks
-useLocation: A hook from react-router-dom used to access the current URL location.
-useState: A hook from React used to manage state variables.
-useEffect: A hook from React used to perform side effects in function components.

Functions
-HandleLogout: A function to handle user logout by removing the cookie and reloading the page.
-getUserProfile: An asynchronous function to fetch user profile data from an API.

Rendering
The component renders a sidebar menu with the following elements:
-User profile section displaying the user's profile picture and name.
-Menu items dynamically generated based on the asideArray.
-Active menu item indicated with a highlighted bar.
-Logout button at the bottom of the sidebar.

---
YuktijewelsProfile
-Description: YuktijewelsProfile is a static page designed to display information related to Yuktijewels.
-Purpose: It provides users with detailed information about Yuktijewels, its products, and services.
-Implementation: YuktijewelsProfile renders a Yuktijewels profile with static content.

---
SaveContact
-Description: SaveContact is a function utilized within the YuktijewelsProfile component.
-Usage: This function is exclusively used within the YuktijewelsProfile component and is not utilized in other parts of the application.

-------------- Profile End -------------

-------------- SuccessFailure ----------

SuccessFailure
The SuccessFailure component is a React functional component responsible for displaying success or failure messages to users. It utilizes icons to represent success and failure states and provides functionality to dismiss the message.

Props
-isSuccess: A boolean value indicating whether the message represents a success or failure state.
-message: The text message to be displayed to the user, providing context about the success or failure.
-handlesucessFail: A function to handle the dismissal of the success or failure message.

Components Used
-GiCheckMark: An icon from the react-icons library representing a check mark, used to indicate success.
-IoIosWarning: An icon from the react-icons library representing a warning, used to indicate failure.
-IoClose: An icon from the react-icons library representing a close button, allowing users to dismiss the message.

Implementation
The SuccessFailure component renders a styled message box with a background color determined by the isSuccess prop. If isSuccess is true, the background color is set to a shade of green representing success; otherwise, it is set to a shade of red representing failure. The message content, determined by the message prop, is displayed along with an appropriate icon representing the success or failure state. Additionally, a close button is provided to dismiss the message, which triggers the handlesucessFail function when clicked.

-------------------SuccessFailure End ---------------

--------------Upload.js Start ---------

Upload
     -upload is used to upload media and files in firebase and return the download URL

--------------Upload.js End -----------


